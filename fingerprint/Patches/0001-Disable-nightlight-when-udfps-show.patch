From beab6a84a0bb820494b329163bb24b1aafc4b91f Mon Sep 17 00:00:00 2001
From: wfhtqp <wfhtqp@gmail.com>
Date: Thu, 10 Mar 2022 23:07:26 +0000
Subject: [PATCH] Disable nightlight when udfps show

Change-Id: I4c084e67e4baec95617c69818c651e8d6fc55133
---
 .../systemui/biometrics/UdfpsController.java  | 26 ++++++++++++++++++-
 1 file changed, 25 insertions(+), 1 deletion(-)

diff --git a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
index fca05b61231f..91cac04e6808 100644
--- a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
+++ b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
@@ -34,6 +34,7 @@ import android.graphics.PixelFormat;
 import android.graphics.Point;
 import android.graphics.RectF;
 import android.hardware.display.DisplayManager;
+import android.hardware.display.ColorDisplayManager;
 import android.hardware.fingerprint.FingerprintManager;
 import android.hardware.fingerprint.FingerprintSensorPropertiesInternal;
 import android.hardware.fingerprint.IUdfpsOverlayController;
@@ -174,6 +175,7 @@ public class UdfpsController implements DozeReceiver, UdfpsHbmProvider {
     private final SystemSettings mSystemSettings;
     private boolean mScreenOffFod;
 
+
     @VisibleForTesting
     public static final AudioAttributes VIBRATION_SONIFICATION_ATTRIBUTES =
             new AudioAttributes.Builder()
@@ -250,10 +252,31 @@ public class UdfpsController implements DozeReceiver, UdfpsHbmProvider {
     }
 
     public class UdfpsOverlayController extends IUdfpsOverlayController.Stub {
+
+        private boolean mNightModeActive;
+        private int mAutoModeState;
+
+	private void setNightMode() {
+	         ColorDisplayManager colorDisplayManager = mContext.getSystemService(ColorDisplayManager.class);
+		 colorDisplayManager.setNightDisplayAutoMode(0);
+		 if (mAutoModeState == 0) {
+		     colorDisplayManager.setNightDisplayActivated(mNightModeActive);
+		 } else if (mAutoModeState == 1 || mAutoModeState == 2) {
+		     colorDisplayManager.setNightDisplayAutoMode(mAutoModeState);
+		 }
+	}
+
+
         @Override
         public void showUdfpsOverlay(int sensorId, int reason,
                 @NonNull IUdfpsOverlayControllerCallback callback) {
             mFgExecutor.execute(() -> {
+
+                ColorDisplayManager colorDisplayManager = mContext.getSystemService(ColorDisplayManager.class);
+		mAutoModeState = colorDisplayManager.getNightDisplayAutoMode();
+		mNightModeActive = colorDisplayManager.isNightDisplayActivated();
+		colorDisplayManager.setNightDisplayActivated(false);
+
                 final UdfpsEnrollHelper enrollHelper;
                 if (reason == IUdfpsOverlayController.REASON_ENROLL_FIND_SENSOR
                         || reason == IUdfpsOverlayController.REASON_ENROLL_ENROLLING) {
@@ -269,6 +292,7 @@ public class UdfpsController implements DozeReceiver, UdfpsHbmProvider {
         @Override
         public void hideUdfpsOverlay(int sensorId) {
             mFgExecutor.execute(() -> {
+		setNightMode();
                 mServerRequest = null;
                 updateOverlay();
             });
@@ -1109,4 +1133,4 @@ public class UdfpsController implements DozeReceiver, UdfpsHbmProvider {
          */
         void onFingerDown();
     }
-}
\ No newline at end of file
+}
-- 
2.35.1

